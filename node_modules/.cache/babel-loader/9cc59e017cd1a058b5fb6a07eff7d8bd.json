{"ast":null,"code":"import _classCallCheck from \"/Users/yayefatouthiam/Working/ClickyGame/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yayefatouthiam/Working/ClickyGame/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/yayefatouthiam/Working/ClickyGame/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/yayefatouthiam/Working/ClickyGame/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yayefatouthiam/Working/ClickyGame/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/yayefatouthiam/Working/ClickyGame/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\"; // import Title from \"./components/Title\";\n\nimport NavBar from \"./components/NavBar\"; // import Jumbotron from \"./components/Jumbotron\";\n\nimport friends from \"./friends.json\";\nvar score = 0;\nvar topscore = 0;\nvar message = \"\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      friends: friends,\n      topscore: topscore,\n      score: score,\n      message: message\n    };\n\n    _this.schuffleFriend = function (id) {\n      // Filter this.state.friends for friends with an id not equal to the id being removed\n      //const friends = this.state.friends.filter(friend => friend.id !== id);\n      // Set this.state.friends equal to the new friends array\n      var friends = _this.state.friends;\n      var cardClicked = friends.filter(function (friend) {\n        return friend.id === id;\n      }); // If a card is already clicked\n\n      if (cardClicked[0].clicked) {\n        // the score is reinitialized\n        score = 0; // topscore = 0;\n\n        message = \"start over\"; //the clicked value to all the cards is reinitilaized to false\n\n        for (var i = 0; i < friends.length; i++) {\n          friends[i].clicked = false;\n        }\n\n        _this.setState({\n          message: message\n        });\n\n        _this.setState({\n          score: score\n        }); // this.setState({topscore});\n\n\n        _this.setState({\n          friends: friends\n        }); // this.setState({ friends, score:   this.state.score, Topscore: this.state.topscore });\n        // SHOULD WE SHUFFLE?\n\n      } else {\n        cardClicked[0].clicked = true;\n        score++;\n        message = \"Good job\";\n\n        if (score > topscore) {\n          topscore = score;\n\n          _this.setState({\n            topscore: topscore\n          });\n\n          _this.setState({\n            score: score\n          });\n        }\n\n        friends.sort(function () {\n          return Math.random() - 0.5;\n        }); // this.setState({ friends, score:   this.state.score +1 });\n\n        console.log(\"after shuffle\");\n\n        _this.setState({\n          friends: friends\n        });\n\n        _this.setState({\n          score: score\n        });\n\n        _this.setState({\n          message: message\n        }); // this.setState({topscore});\n        // this.setState({ friends, score:   this.state.score, Topscore: this.state.topscore });\n\n\n        console.log(score);\n        console.log(topscore); // if (score > topscore) {\n        //   topscore = score;\n        //   this.setState({topscore});\n        // }\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    // Map over this.state.friends and render a FriendCard component for each friend object\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"test\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(NavBar, {\n        score: this.state.score,\n        topscore: this.state.topscore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }), React.createElement(Wrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, this.state.friends.map(function (friend) {\n        return React.createElement(FriendCard, {\n          schuffleFriend: _this2.schuffleFriend,\n          id: friend.id,\n          key: friend.id,\n          image: friend.image // className=\"col-sm-4\"\n          ,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/yayefatouthiam/Working/ClickyGame/client/src/App.js"],"names":["React","Component","FriendCard","Wrapper","NavBar","friends","score","topscore","message","App","state","schuffleFriend","id","cardClicked","filter","friend","clicked","i","length","setState","sort","Math","random","console","log","map","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\n// import Title from \"./components/Title\";\nimport NavBar from \"./components/NavBar\";\n// import Jumbotron from \"./components/Jumbotron\";\nimport friends from \"./friends.json\";\n\n\nlet score = 0;\nlet topscore = 0;\nlet message = \"\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends,\n    topscore,\n    score,\n    message\n  };\n\n\n  schuffleFriend = id => {\n    \n    // Filter this.state.friends for friends with an id not equal to the id being removed\n    //const friends = this.state.friends.filter(friend => friend.id !== id);\n    // Set this.state.friends equal to the new friends array\n    const friends = this.state.friends;\n    const cardClicked = friends.filter(friend => friend.id === id);\n\n    // If a card is already clicked\n    if (cardClicked[0].clicked) {\n      // the score is reinitialized\n      score = 0;\n      // topscore = 0;\n      message = \"start over\";\n      //the clicked value to all the cards is reinitilaized to false\n      for (let i = 0; i < friends.length; i++) {\n\t\t\t\tfriends[i].clicked = false;\n      }\n      this.setState({message});\n      this.setState({score});\n      // this.setState({topscore});\n      this.setState({friends});\n      // this.setState({ friends, score:   this.state.score, Topscore: this.state.topscore });\n      // SHOULD WE SHUFFLE?\n    }\n    else {\n      cardClicked[0].clicked = true;\n      score++;\n      message = \"Good job\";\n\n      if (score > topscore) {\n        topscore = score;\n        this.setState({topscore});\n        this.setState({score});\n      }\n\n      friends.sort(() => Math.random() - 0.5);\n      // this.setState({ friends, score:   this.state.score +1 });\n      console.log(\"after shuffle\");\n      this.setState({friends});\n      this.setState({score});\n      this.setState({message});\n      // this.setState({topscore});\n\n      // this.setState({ friends, score:   this.state.score, Topscore: this.state.topscore });\n      console.log(score);\n      console.log(topscore);\n\n      // if (score > topscore) {\n      //   topscore = score;\n      //   this.setState({topscore});\n      // }\n    }\n  };\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <div className=\"test\">\n        <NavBar \n          score={this.state.score}\n          topscore={this.state.topscore}\n        />\n        {/* <Jumbotron /> */}\n        <Wrapper>\n        {/* <Title>Friends List score: { this.state.score}  </Title> */}\n        {/* <div className=\"row\"> */}\n          {this.state.friends.map(friend => (\n            <FriendCard\n              schuffleFriend={this.schuffleFriend}\n              id={friend.id}\n              key={friend.id}\n              image={friend.image}\n              // className=\"col-sm-4\"\n            />\n          ))}\n        {/* </div> */}\n      </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}